{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Usuario iTC\\\\Desktop\\\\Pis4to-main\\\\rutas_evacuacion\\\\src\\\\components\\\\MapView.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport 'leaflet/dist/leaflet.css';\nimport Markers from \"./Markers\";\nimport placesData from '../assets/data.json';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport MenuBar from \"./MenuBar\";\nimport { MapContainer, TileLayer, Polyline } from \"react-leaflet\";\nimport { createGraph, dijkstra } from './dijkstra';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MapView = () => {\n  _s();\n  const {\n    places\n  } = placesData;\n  const [state, setState] = useState({\n    currenlocation: {\n      lat: '-4.029817',\n      lng: '-79.199492'\n    },\n    zoom: 20\n  });\n  const location = useLocation();\n  const history = useNavigate();\n\n  // Asume que tienes dos estados `start` y `end` que representan los nombres de los lugares de inicio y fin\n  const [start, setStart] = useState(null);\n  const [end, setEnd] = useState(null);\n\n  // Calcula el camino más corto cuando cambian los puntos de inicio o fin\n  useEffect(() => {\n    if (start && end) {\n      let graph = createGraph(places);\n      let shortestPath = dijkstra(graph, start, end);\n      setShortestPath(shortestPath);\n    }\n  }, [start, end]);\n  useEffect(() => {\n    if (location.state && location.state.latitude && location.state.longitude) {\n      const currenlocation = {\n        lat: location.state.latitude,\n        lng: location.state.longitude\n      };\n      setState(prevState => ({\n        ...prevState,\n        currenlocation\n      }));\n      history.replace({\n        pathname: '/map',\n        state: {}\n      });\n    }\n  }, [history, location.state]); // Agregar las dependencias aquí\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(MenuBar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 18\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(MapContainer, {\n        center: state.currenlocation,\n        zoom: state.zoom,\n        children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n          url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n          attribution: \"OpenStreetMap\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Markers, {\n          places: places\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Polyline, {\n          positions: places.map(place => place.geometry),\n          color: \"black\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Polyline, {\n          positions: shortestPath,\n          color: \"red\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 9\n  }, this);\n};\n_s(MapView, \"4uswpTAzMyJNFbg9QOl9XSRXwyI=\", false, function () {\n  return [useLocation, useNavigate];\n});\n_c = MapView;\nexport default MapView;\nvar _c;\n$RefreshReg$(_c, \"MapView\");","map":{"version":3,"names":["React","useState","useEffect","Markers","placesData","useLocation","useNavigate","MenuBar","MapContainer","TileLayer","Polyline","createGraph","dijkstra","jsxDEV","_jsxDEV","MapView","_s","places","state","setState","currenlocation","lat","lng","zoom","location","history","start","setStart","end","setEnd","graph","shortestPath","setShortestPath","latitude","longitude","prevState","replace","pathname","children","fileName","_jsxFileName","lineNumber","columnNumber","center","url","attribution","positions","map","place","geometry","color","_c","$RefreshReg$"],"sources":["C:/Users/Usuario iTC/Desktop/Pis4to-main/rutas_evacuacion/src/components/MapView.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport 'leaflet/dist/leaflet.css';\nimport Markers from \"./Markers\";\nimport placesData from '../assets/data.json';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport MenuBar from \"./MenuBar\";\nimport { MapContainer, TileLayer, Polyline } from \"react-leaflet\";\nimport { createGraph, dijkstra } from './dijkstra';\n\n\n\nconst MapView = () => {\n    const { places } = placesData;\n    const [state, setState] = useState({\n        currenlocation: { lat: '-4.029817', lng: '-79.199492' },\n        zoom: 20\n    })\n    const location = useLocation();\n    const history = useNavigate();\n\n    // Asume que tienes dos estados `start` y `end` que representan los nombres de los lugares de inicio y fin\n    const [start, setStart] = useState(null);\n    const [end, setEnd] = useState(null);\n\n    // Calcula el camino más corto cuando cambian los puntos de inicio o fin\n    useEffect(() => {\n        if (start && end) {\n            let graph = createGraph(places);\n            let shortestPath = dijkstra(graph, start, end);\n            setShortestPath(shortestPath);\n        }\n    }, [start, end]);\n\n    useEffect(() => {\n        if (location.state && location.state.latitude && location.state.longitude) {\n            const currenlocation = {\n                lat: location.state.latitude,\n                lng: location.state.longitude,\n            }\n            setState(prevState => ({ ...prevState, currenlocation }))\n\n            history.replace({ pathname: '/map', state: {} })\n        }\n    }, [history, location.state]); // Agregar las dependencias aquí\n\n    return (\n        <div>\n            <div><MenuBar></MenuBar></div>\n            <div>\n                <MapContainer center={state.currenlocation} zoom={state.zoom}>\n                    <TileLayer\n                        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                        attribution=\"OpenStreetMap\"\n                    />\n                    <Markers places={places} />\n                    <Polyline positions={places.map(place => place.geometry)} color=\"black\" />\n                    <Polyline positions={shortestPath} color=\"red\" />\n                </MapContainer>\n            </div>\n        </div>\n    );\n}\nexport default MapView;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}